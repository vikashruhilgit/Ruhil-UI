{"version":3,"file":"GooglePay.js","sourceRoot":"","sources":["../../../../src/component/gpay/GooglePay.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { html, LitElement } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { eventObj } from '../../utility/util';\n\nimport { styles } from './googlePay.css';\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\nexport interface PaymentItem {\n  label: string;\n  type: string;\n  price: string;\n}\nexport interface TransactionData {\n  displayItems: PaymentItem[];\n  countryCode: string;\n  currencyCode: string;\n  totalPriceStatus: string;\n  totalPrice: string;\n  totalPriceLabel: string;\n}\n\ninterface GError {\n  status: boolean;\n  msg: string;\n  detailError?: any;\n}\n\nexport interface GPayConfig {\n  publicKey: string;\n  customerkey: string;\n  environment?: 'TEST' | 'PRODUCTION';\n  buttonColor?: 'black' | 'white';\n  buttonLocale?: string;\n  type?: 'AUTH' | 'PAYMENT';\n}\n\nconst initialConfig: GPayConfig = {\n  publicKey: '',\n  customerkey: '',\n  environment: 'TEST',\n  buttonColor: 'black',\n  buttonLocale: 'en',\n  type: 'AUTH',\n};\n\ntype PromiseType = () => Promise<unknown>;\n\nexport class GooglePay extends LitElement {\n  @state()\n  private _error: GError = {\n    status: false,\n    msg: '',\n  };\n\n  private _config: GPayConfig = initialConfig;\n\n  private _transactionData: TransactionData | null = null;\n\n  private _paymentsClient: any = null;\n\n  _iframe: any;\n\n  private _onPaymentAuthorized: PromiseType = () =>\n    new Promise(resolve => {\n      resolve({\n        transactionState: 'SUCCESS',\n      });\n    });\n\n  /**\n   * Define the version of the Google Pay API referenced when creating your\n   * configuration\n   *\n   * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|apiVersion in PaymentDataRequest}\n   */\n  _baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n  };\n\n  /**\n   * Card networks supported by your site and your gateway\n   *\n   * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n   * @todo confirm card networks supported by your site and gateway\n   */\n  _allowedCardNetworks = ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'];\n\n  /**\n   * Card authentication methods supported by your site and your gateway\n   *\n   * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n   * @todo confirm your processor supports Android device tokens for your\n   * supported card networks\n   */\n  _allowedCardAuthMethods = ['PAN_ONLY', 'CRYPTOGRAM_3DS'];\n\n  /**\n   * Identify your gateway and your site's gateway merchant identifier\n   *\n   * The Google Pay API response will return an encrypted payment method capable\n   * of being charged by a supported gateway after payer authorization\n   *\n   * @todo check with your gateway on the parameters to pass\n   * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#gateway|PaymentMethodTokenizationSpecification}\n   */\n\n  _tokenizationSpecification = {\n    type: 'DIRECT',\n    parameters: {\n      protocolVersion: 'ECv2',\n      publicKey: '',\n    },\n  };\n\n  /* _tokenizationSpecification = {\n    type: 'PAYMENT_GATEWAY',\n    parameters: {\n      gateway: 'globalpayments',\n      gatewayMerchantId: '888000103376',\n    },\n  };\n */\n  /**\n   * Describe your site's support for the CARD payment method and its required\n   * fields\n   *\n   * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n   */\n  _baseCardPaymentMethod = {\n    type: 'CARD',\n    parameters: {\n      allowedAuthMethods: this._allowedCardAuthMethods,\n      allowedCardNetworks: this._allowedCardNetworks,\n    },\n  };\n\n  /**\n   * Describe your site's support for the CARD payment method including optional\n   * fields\n   *\n   * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n   */\n  _cardPaymentMethod = {\n    ...this._baseCardPaymentMethod,\n    tokenizationSpecification: this._tokenizationSpecification,\n  };\n\n  renderGpay = (\n    config: GPayConfig,\n    transactionData: TransactionData,\n    paymentCallback: PromiseType\n  ) => {\n    this._config = {\n      ...config,\n    };\n    this._transactionData = transactionData;\n    this._onPaymentAuthorized = paymentCallback;\n    this._getClientInfo(this._config);\n  };\n\n  _checkAndLoadGooglePayButton = () => {\n    if (\n      window.google &&\n      window.google.payments &&\n      window.google.payments.api &&\n      window.google.payments.api.PaymentsClient\n    ) {\n      this._onGooglePayLoaded();\n    } else {\n      const scriptElement = document.createElement('script');\n      scriptElement.type = 'text/javascript';\n      scriptElement.src = 'https://pay.google.com/gp/p/js/pay.js';\n      document.head.appendChild(scriptElement);\n      scriptElement.onload = this._onGooglePayLoaded;\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _getClientInfo = (config: GPayConfig) => {\n    this._setClientData(config);\n    this._checkAndLoadGooglePayButton();\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _setClientData = (config: GPayConfig) => {\n    // console.log(clientInfo);\n    this._tokenizationSpecification.parameters.publicKey = config.publicKey;\n  };\n\n  _onGooglePayLoaded = () => {\n    const _paymentsClient = this._getGooglePaymentsClient();\n    _paymentsClient\n      .isReadyToPay(this._getGoogleIsReadyToPayRequest())\n      .then((response: any) => {\n        if (response.result) {\n          this._addGooglePayButton();\n          // @todo prefetch payment data to improve performance after confirming site functionality\n          // prefetchGooglePaymentData();\n        }\n      })\n      .catch((err: any) => {\n        // show error in developer console for debugging\n        console.error(err);\n      });\n  };\n\n  _getGoogleIsReadyToPayRequest = () => ({\n    ...this._baseRequest,\n    allowedPaymentMethods: [this._baseCardPaymentMethod],\n  });\n\n  // use this for gettingthis out of the shodow root.\n  /* createRenderRoot() {\n    return this;\n  } */\n\n  /* _registredMerchantInfo = {\n    merchantName: 'Example Merchant',\n    merchantId: '01234567890123456789',\n  }; */\n\n  _googleMerchantInfo = {\n    // @todo a merchant ID is available for a production environment after approval by Google\n    // See {@link https://developers.google.com/pay/api/web/guides/test-and-deploy/integration-checklist|Integration checklist}\n    merchantId: '01234567890123456789',\n    merchantName: '',\n  };\n\n  // eslint-disable-next-line arrow-body-style\n  _getRegistredMerchantInfo = (merchantName: string) => {\n    return { ...this._googleMerchantInfo, merchantName };\n  };\n\n  _getGooglePaymentsClient = () => {\n    if (this._paymentsClient === null) {\n      let paymentDataCallbacks = null;\n      if (this._config.type === 'PAYMENT') {\n        paymentDataCallbacks = {\n          onPaymentAuthorized: this._onPaymentAuthorized,\n          // onPaymentDataChanged: onPaymentDataChanged,\n        };\n      }\n      this._paymentsClient = new window.google.payments.api.PaymentsClient({\n        environment: this._config.environment,\n        merchantInfo: this._getRegistredMerchantInfo(this._config.customerkey),\n        paymentDataCallbacks,\n      });\n    }\n    return this._paymentsClient;\n  };\n\n  _addGooglePayButton = () => {\n    const paymentsClient = this._getGooglePaymentsClient();\n\n    const button = paymentsClient.createButton({\n      onClick: this._onGooglePaymentButtonClicked,\n      buttonColor: this._config.buttonColor,\n      buttonLocale: this._config.buttonLocale,\n    });\n\n    const el = this.shadowRoot?.getElementById('google-pay');\n    if (el) {\n      el.appendChild(button);\n    }\n  };\n\n  _onGooglePaymentButtonClicked = () => {\n    const paymentDataRequest = this._getGooglePaymentDataRequest();\n    paymentDataRequest.transactionInfo = this._transactionData;\n\n    const paymentsClient = this._getGooglePaymentsClient();\n    paymentsClient\n      .loadPaymentData(paymentDataRequest)\n      .then((paymentData: any) => {\n        this.dispatchEvent(eventObj('gpay-success', paymentData));\n      })\n      .catch((err: Error) => {\n        this._errorHandler({\n          status: true,\n          msg: 'refer detail error',\n          detailError: err,\n        });\n      });\n  };\n\n  _getGooglePaymentDataRequest = () => {\n    const paymentDataRequest: any = { ...this._baseRequest };\n    paymentDataRequest.allowedPaymentMethods = [this._cardPaymentMethod];\n    paymentDataRequest.transactionInfo = this._transactionData;\n    paymentDataRequest.merchantInfo = this._getRegistredMerchantInfo(\n      this._config.customerkey\n    );\n    if (this._config.type === 'PAYMENT') {\n      paymentDataRequest.callbackIntents = ['PAYMENT_AUTHORIZATION'];\n    }\n\n    return paymentDataRequest;\n  };\n\n  _errorHandler = (err: GError) => {\n    this._error = {\n      ...err,\n    };\n    this.dispatchEvent(eventObj('gpay-error', err));\n  };\n\n  _refreshButton = () => {\n    this._error = {\n      status: false,\n      msg: '',\n    };\n    const el = this.shadowRoot?.getElementById('google-pay');\n    if (el) {\n      el.innerHTML = '';\n      this._paymentsClient = null;\n      this._onGooglePayLoaded();\n    }\n  };\n\n  errorMsg = html`<span\n    >Something went wrong. Try again.<span\n      @click=\"${this._refreshButton}\"\n      @keyup=\"${this._refreshButton}\"\n      >Refresh</span\n    ></span\n  > `;\n\n  render = () => html`\n    <div id=\"google-pay\"></div>\n    ${this._error.status ? null : null}\n  `;\n\n  static styles = styles;\n}\n"]}