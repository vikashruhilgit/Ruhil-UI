{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../src/utility/http.ts"],"names":[],"mappings":"AAAA,6BAA6B;AAE7B,MAAM,aAAa,GAAG,CAAC,MAAoB,EAAe,EAAE;IAC1D,IAAI,aAAa,GAAgB;QAC/B,MAAM,EAAE,KAAK;QACb,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;SACnC;KACF,CAAC;IAEF,IAAI,MAAM,EAAE;QACV,aAAa,GAAG;YACd,GAAG,aAAa;YAChB,GAAG,MAAM;YACT,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,KAAK;YAC9B,OAAO,EAAE;gBACP,GAAG,aAAa,CAAC,OAAO;gBACxB,GAAG,MAAM,CAAC,OAAO;aAClB;SACF,CAAC;KACH;IAED,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAC9B,IAAY,EACZ,MAAoB,EACpB,IAAQ,EACI,EAAE;IACd,MAAM,SAAS,GAAgB,aAAa,CAAC,MAAM,CAAC,CAAC;IAErD,IAAI,IAAI,EAAE;QACR,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,MAAM,QAAQ,GAAa,MAAM,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACxD,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;QAChB,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChD,GAAG,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACtC,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC;QAClC,MAAM,GAAG,CAAC;KACX;IACD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACrC,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAC7B,IAAY,EACZ,MAAoB,EACR,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;AAEjE,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAC9B,IAAY,EACZ,IAAQ,EACR,MAAoB,EACR,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC;AAExE,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAC7B,IAAY,EACZ,IAAQ,EACR,MAAoB,EACR,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;AAEvE,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAC/B,IAAY,EACZ,IAAQ,EACR,MAAoB,EACR,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;AAEzE,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,IAAmB,EAAE;IACnD,MAAM,GAAG,GAAM,MAAM,UAAU,CAC7B,yDAAyD,CAC1D,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC,CAAC","sourcesContent":["/* eslint-disable no-undef */\n\nconst requestConfig = (config?: RequestInit): RequestInit => {\n  let configuration: RequestInit = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  if (config) {\n    configuration = {\n      ...configuration,\n      ...config,\n      method: config.method || 'GET',\n      headers: {\n        ...configuration.headers,\n        ...config.headers,\n      },\n    };\n  }\n\n  return configuration;\n};\n\nexport const httpRequest = async <T, U>(\n  path: string,\n  config?: RequestInit,\n  body?: T\n): Promise<U> => {\n  const reqConfig: RequestInit = requestConfig(config);\n\n  if (body) {\n    reqConfig.body = JSON.stringify(body);\n  }\n\n  const response: Response = await fetch(path, reqConfig);\n  if (!response.ok) {\n    const err = new Error(JSON.stringify(response));\n    err.name = response.status.toString();\n    err.message = response.statusText;\n    throw err;\n  }\n  const result = await response.json();\n  return result;\n};\n\nexport const getRequest = async <U>(\n  path: string,\n  config?: RequestInit\n): Promise<U> => httpRequest(path, { ...config, method: 'GET' });\n\nexport const postRequest = async <T, U>(\n  path: string,\n  body?: T,\n  config?: RequestInit\n): Promise<U> => httpRequest(path, { ...config, method: 'POST' }, body);\n\nexport const putRequest = async <T, U>(\n  path: string,\n  body?: T,\n  config?: RequestInit\n): Promise<U> => httpRequest(path, { ...config, method: 'PUT' }, body);\n\nexport const patchRequest = async <T, U>(\n  path: string,\n  body?: T,\n  config?: RequestInit\n): Promise<U> => httpRequest(path, { ...config, method: 'PATCH' }, body);\n\nexport const fakeRequest = async <T>(): Promise<T> => {\n  const res: T = await getRequest(\n    'https://my-json-server.typicode.com/typicode/demo/posts'\n  );\n  return res;\n};\n"]}