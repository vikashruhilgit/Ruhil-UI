{"version":3,"file":"dynamic-script-loader.js","sourceRoot":"","sources":["../../../src/utility/dynamic-script-loader.ts"],"names":[],"mappings":"AAKA,qCAAqC;AACrC,MAAM,CAAN,IAAY,OAEX;AAFD,WAAY,OAAO;IACjB,gCAAqB,CAAA;AACvB,CAAC,EAFW,OAAO,KAAP,OAAO,QAElB;AACD,MAAM,UAAU;IAOd;QAFA,SAAI,GAA8C,EAAE,CAAC;QAGnD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,YAAY;QACV,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YACb,GAAG,EAAE,OAAO,CAAC,QAAQ;YACrB,QAAQ,EAAE;;;;;;;;;;;;;oBAaI;SACf,CAAC,CAAC;IACL,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,MAAc,EAAQ,EAAE;IACtD,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC;IACrB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC;AACF;;;GAGG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,MAAqB,EAAQ,EAAE;IACvD,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IACvB,IAAI,MAAM,CAAC,cAAc,EAAE;QACzB,CAAC,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;KAC1C;IACD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,GAAY,EAAQ,EAAE;;IAClD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAChD,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC;IAChC,MAAM,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;IAC5B,MAAM,CAAC,SAAS,GAAG,CAAA,MAAA,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,0CAAE,QAAQ,KAAI,EAAE,CAAC;IACpE,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;IACnC,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,UAAU,0CAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC","sourcesContent":["export interface DynamicScript {\n  src: string;\n  async: boolean;\n  referrerPolicy?: string;\n}\n// eslint-disable-next-line no-shadow\nexport enum JSTypes {\n  EPAYMENT = 'ePayment',\n}\nclass JsFunction {\n  key!: JSTypes;\n\n  jsString!: string;\n\n  data: Array<{ key: JSTypes; jsString: string }> = [];\n\n  constructor() {\n    this.populateData();\n  }\n\n  populateData() {\n    this.data.push({\n      key: JSTypes.EPAYMENT,\n      jsString: `function tsepHandler(eventType, event) { \n                     if(eventType === 'TokenEvent'){                       \n                         if(event.responseCode === 'A0000'){\n                            const raiseEvent = new CustomEvent('TSYSTokenEvent', { detail: event, bubbles: true, composed: true });\n                            document.dispatchEvent(raiseEvent);\n                         }\n                     } else if(eventType === 'FieldValidationErrorEvent'){\n                        const raiseEvent = new CustomEvent('TSYSFieldValidationError', { detail: event, bubbles: true, composed: true });\n                        document.dispatchEvent(raiseEvent);\n                     } else if(eventType === 'FieldValidationSuccessEvent'){\n                        const raiseEvent = new CustomEvent('TSYSFieldValidationSuccess', { detail: event, bubbles: true, composed: true });\n                        document.dispatchEvent(raiseEvent);\n                     }\n                  }`,\n    });\n  }\n}\n\n/**\n * Add styles to the Head of the document - used for those components which has shadow root disabled\n * @param styles - styles to be applied for the compoenent\n */\nexport const addStylesToHead = (styles: string): void => {\n  const s = document.createElement('style');\n  s.innerText = styles;\n  document.head.appendChild(s);\n};\n/**\n * Add scrupt to the HEAD of the document dynamically\n * @param script - Script to be added\n */\nexport const addScript = (script: DynamicScript): void => {\n  const s = document.createElement('script');\n  s.setAttribute('src', script.src);\n  s.async = script.async;\n  if (script.referrerPolicy) {\n    s.referrerPolicy = script.referrerPolicy;\n  }\n  document.head.appendChild(s);\n};\n\n/**\n * Add JS to the body of the document\n * @param key - KEY based on which the JS function will be added.\n */\nexport const addJsFunction = (key: JSTypes): void => {\n  const script = document.createElement('script');\n  script.type = 'text/javascript';\n  const js = new JsFunction();\n  script.innerHTML = js.data.find(x => x.key === key)?.jsString || '';\n  const s = document.body.firstChild;\n  s?.parentNode?.insertBefore(script, s);\n};\n"]}